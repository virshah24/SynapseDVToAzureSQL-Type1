{"$schema":"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#","contentVersion":"1.0.0.0","parameters":{"workspaceName":{"type":"string","metadata":"Workspace name","defaultValue":"synapsews-d365-analytics"},"DvD365Serverless":{"type":"string"},"sqlMSFTacmedw":{"type":"string"}},"variables":{"workspaceId":"[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"},"resources":[{"name":"[concat(parameters('workspaceName'), '/SynapseDVToAzureSQL-Type1')]","type":"Microsoft.Synapse/workspaces/pipelines","apiVersion":"2019-06-01-preview","properties":{"description":"After using Azure Synapse Link for Dataverse, use this template to sync the Dataverse data from Azure Data Lake to Azure SQL","activities":[{"name":"Sync-Account","type":"ExecuteDataFlow","dependsOn":[],"policy":{"timeout":"1.00:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"dataflow":{"referenceName":"DataverseToAzureSQLType1","type":"DataFlowReference","parameters":{"DataverseServerlessDB":"\"dataverse-defaultdirec-unq8587af79075d41caa9f50015188ae\"","TableName":"\"account\"","KeyCol":"\"Id\"","ChangeCols":"\"Id,address1_city,description,name\"","SQLSchemaName":"\"dbo\"","DataverseServerlessSchema":"\"dbo\""},"datasetParameters":{"DataverseServerlessSrc":{},"tgtSqlLkp":{},"tgtSqlUpdates":{},"tgtSqlInserts":{},"tgtSqlDeletes":{}},"linkedServiceParameters":{}},"staging":{},"integrationRuntime":{"referenceName":"myAutoIR","type":"IntegrationRuntimeReference"},"traceLevel":"Fine"}},{"name":"Sync-Contact","type":"ExecuteDataFlow","dependsOn":[],"policy":{"timeout":"1.00:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"dataflow":{"referenceName":"DataverseToAzureSQLType1","type":"DataFlowReference","parameters":{"DataverseServerlessDB":"\"dataverse-defaultdirec-unq8587af79075d41caa9f50015188ae\"","TableName":"\"contact\"","KeyCol":"\"Id\"","ChangeCols":"\"Id,fullname,parentcontactid,emailaddress1,lastname\"","SQLSchemaName":"\"dbo\"","DataverseServerlessSchema":"\"dbo\""},"datasetParameters":{"DataverseServerlessSrc":{},"tgtSqlLkp":{},"tgtSqlUpdates":{},"tgtSqlInserts":{},"tgtSqlDeletes":{}},"linkedServiceParameters":{}},"staging":{},"integrationRuntime":{"referenceName":"myAutoIR","type":"IntegrationRuntimeReference"},"traceLevel":"Fine"}}],"policy":{"elapsedTimeMetric":{},"cancelAfter":{}},"annotations":[],"lastPublishTime":"2022-04-20T19:31:25Z"},"dependsOn":["[concat(variables('workspaceId'), '/dataflows/DataverseToAzureSQLType1')]"]},{"name":"[concat(parameters('workspaceName'), '/DataverseToAzureSQLType1')]","type":"Microsoft.Synapse/workspaces/dataflows","apiVersion":"2019-06-01-preview","properties":{"description":"Writes Dataverse data in Azure Data Lake Storage Gen2 to Azure SQL Database.","type":"MappingDataFlow","typeProperties":{"sources":[{"linkedService":{"referenceName":"[parameters('DvD365Serverless')]","type":"LinkedServiceReference"},"name":"DataverseServerlessSrc"},{"linkedService":{"referenceName":"[parameters('sqlMSFTacmedw')]","type":"LinkedServiceReference"},"name":"tgtSqlLkp"}],"sinks":[{"linkedService":{"referenceName":"[parameters('sqlMSFTacmedw')]","type":"LinkedServiceReference"},"name":"tgtSqlUpdates"},{"linkedService":{"referenceName":"[parameters('sqlMSFTacmedw')]","type":"LinkedServiceReference"},"name":"tgtSqlInserts"},{"linkedService":{"referenceName":"[parameters('sqlMSFTacmedw')]","type":"LinkedServiceReference"},"name":"tgtSqlDeletes"}],"transformations":[{"name":"UpdateExisting"},{"name":"AddHashExisting"},{"name":"AddHashInput"},{"name":"IdentifyUpdates"},{"name":"NewInserts"},{"name":"InsertNew"},{"name":"RightOuterJoin"},{"name":"IdentifyDeletes"},{"name":"DeleteRow"},{"name":"DropUnwanted","description":"Creates an explicit mapping for each drifted column"}],"script":"parameters{\n\tDataverseServerlessDB as string (\"dataverse-defaultdirec-unq8587af79075d41caa9f50015188ae\"),\n\tTableName as string (\"account\"),\n\tKeyCol as string (\"Id\"),\n\tChangeCols as string (\"Id,address1_city,description,name\"),\n\tSQLSchemaName as string (\"dbo\"),\n\tDataverseServerlessSchema as string (\"dbo\")\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tstore: 'sqlserver',\n\tschemaName: ($DataverseServerlessSchema),\n\ttableName: ($TableName),\n\tisolationLevel: 'READ_COMMITTED',\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy hh:mm:ss a'],\n\tpreferredIntegralType: 'long',\n\tpreferredFractionalType: 'float',\n\tpartitionBy('roundRobin', 4),\n\tmode: 'read',\n\tmanifestType: 'model') ~> DataverseServerlessSrc\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tstore: 'sqlserver',\n\tschemaName: ($SQLSchemaName),\n\ttableName: ($TableName),\n\tisolationLevel: 'READ_COMMITTED',\n\tpartitionBy('roundRobin', 4)) ~> tgtSqlLkp\nIdentifyUpdates alterRow(updateIf(true())) ~> UpdateExisting\ntgtSqlLkp derive(id_hash = md5(byNames(split($KeyCol,','))),\n\t\tcolumns_hash = md5(byNames(split($ChangeCols,','))),\n\t\tKey_existing = byName($KeyCol),\n\tpartitionBy('roundRobin', 4)) ~> AddHashExisting\nDataverseServerlessSrc derive(id_hash = md5(byNames(split($KeyCol,','))),\n\t\tcolumns_hash = md5(byNames(split($ChangeCols,','))),\n\t\tKey_input = byName($KeyCol)) ~> AddHashInput\nAddHashInput, AddHashExisting exists(AddHashInput@id_hash == AddHashExisting@id_hash\n\t&& AddHashInput@columns_hash == AddHashExisting@columns_hash,\n\tnegate:true,\n\tpartitionBy('roundRobin', 4),\n\tbroadcast: 'auto')~> IdentifyUpdates\nAddHashInput, AddHashExisting exists(AddHashInput@id_hash == AddHashExisting@id_hash,\n\tnegate:true,\n\tpartitionBy('roundRobin', 4),\n\tbroadcast: 'auto')~> NewInserts\nNewInserts alterRow(insertIf(true())) ~> InsertNew\nAddHashInput, AddHashExisting join(AddHashInput@id_hash == AddHashExisting@id_hash,\n\tjoinType:'right',\n\tpartitionBy('roundRobin', 4),\n\tbroadcast: 'auto')~> RightOuterJoin\nRightOuterJoin filter(isNull(AddHashInput@id_hash) == true()) ~> IdentifyDeletes\nIdentifyDeletes alterRow(deleteIf(!isNull($KeyCol)==true())) ~> DeleteRow\nDeleteRow derive(Id_input = toString(byName($KeyCol)),\n\t\tId = toString(byName($KeyCol))) ~> DropUnwanted\nUpdateExisting sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tstore: 'sqlserver',\n\tschemaName: ($SQLSchemaName),\n\ttableName: ($TableName),\n\tinsertable: false,\n\tupdateable: true,\n\tdeletable: false,\n\tupsertable: false,\n\tkeys:[($KeyCol)],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tpartitionBy('roundRobin', 4)) ~> tgtSqlUpdates\nInsertNew sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tstore: 'sqlserver',\n\tschemaName: ($SQLSchemaName),\n\ttableName: ($TableName),\n\tinsertable: true,\n\tupdateable: false,\n\tdeletable: false,\n\tupsertable: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError',\n\tpartitionBy('roundRobin', 4)) ~> tgtSqlInserts\nDropUnwanted sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tstore: 'sqlserver',\n\tschemaName: ($SQLSchemaName),\n\ttableName: ($TableName),\n\tinsertable: false,\n\tupdateable: false,\n\tdeletable: true,\n\tupsertable: false,\n\tkeys:[($KeyCol)],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tpartitionBy('roundRobin', 4)) ~> tgtSqlDeletes"}},"dependsOn":[]}]}